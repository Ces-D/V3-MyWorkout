datasource db {
  // provider = "postgresql"
  // url      = env("DATABASE_URL")
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int            @id @default(autoincrement())
  userName       String         @unique @map(name: "user_name")
  email          String         @unique
  hashedPassword String         @map(name: "hashed_password")
  bio            String         @default("")
  createdAt      DateTime       @default(now()) @map(name: "created_at")
  updatedAt      DateTime       @updatedAt @map(name: "updated_at")
  Tracker        Tracker[] // Maps Users, workout date, and the due date
  Program        Program[] // Maps Users to programs they have written
  Subscription   Subscription[] // Maps Users, program activity, and program
  Workout        Workout[] // Maps Users to the workouts they have written only if the workout doesnt belong to program
}

model Program {
  id           Int            @id @default(autoincrement())
  name         String
  published    Boolean        @default(false)
  startDate    String       @map(name: "start_date") // Date the user starts the program
  Writer       User           @relation(fields: [writerId], references: [id])
  writerId     Int
  Workout      Workout[] // Maps Program to the workouts that make it up
  Subscription Subscription[] // Maps Users, program activity, and program
}

model Workout {
  id           Int        @id @default(autoincrement())
  done         Boolean    @default(false)
  Program      Program?   @relation(fields: [programId], references: [id])
  programId    Int? // Optional: if the workout belongs to a program
  programOrder Int?       @map(name: "program_order") // If part of Program, where does this workout place 
  Writer       User?      @relation(fields: [writerId], references: [id])
  writerId     Int? // Optional: if the workout does NOT belong to a program
  Tracker      Tracker[] // Maps Users, workout date, and the due date
  Exercise     Exercise[] // Maps Workout to the exercises that make it up
}

model Exercise {
  id        Int     @id @default(autoincrement())
  name      String
  reps      Int
  weight    Int
  Workout   Workout @relation(fields: [workoutId], references: [id])
  workoutId Int
}

model Subscription {
  id           Int     @id @default(autoincrement())
  active       Boolean @default(false)
  Program      Program @relation(fields: [programId], references: [id])
  programId    Int
  Subscriber   User    @relation(fields: [subscriberId], references: [id])
  subscriberId Int
}

model Tracker {
  id        Int     @id @default(autoincrement())
  User      User    @relation(fields: [userId], references: [id])
  userId    Int
  dueDate   String  @map(name: "due_date")
  Workout   Workout @relation(fields: [workoutId], references: [id])
  workoutId Int
}
